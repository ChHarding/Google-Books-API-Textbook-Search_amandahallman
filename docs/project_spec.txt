# Amanda-Hallman-Project-Spec

Project spec for HCI 584 based on recommending textbook or book information relevant to college or university book titles, authors, or subjects.

### General description of the project
Flask web application that recommends textbooks or books according to the title, author, and/or subject input by the user. Users can search for free eBooks or textbooks using the:

- Google Books API: https://developers.google.com/books/docs/v1/using

### Revised (below)

It provides an interface to open and read the eBooks or textbooks into a web browser. The interface will have a title, a search bar, a subject drop down menu, and options to search by title or author. The main interaction will be a user searching for a course subject (i.e., Math, Biology, Human-Computer Interaction), in which the system produces a list of relevant textbooks or books based on what was entered. The user will be able to select a link associated with a [text]book that opens a digital eReader. There will be a loop that allows the user to continue searching without having to leave the application (back button). The secondary interaction will be a user searching by specific title or author of a [text]book, in which the application produces those particular [text]book(s). 

### Revised (below)

The general interface will be a web application (browser) using Flask. The results page will show the author's name, book title, and description of the book.  The user can filter/refine the search parameters by setting specific subject, title, and/or author. By default, the most relevant books based on the search parameters will be shown.

The primary stakeholders of this application will be college or university students taking courses, and the secondary stakeholders will be college or university faculty members who want additional resources for their courses or the general public. A problem that it will help solve is the limitation of resources provided by the instructor and the course. Students could find further resources (i.e., books or textbooks) that were not provided by the instructor but could be helpful. Students [or the general public] could use it to find books related to a subject that piques their interest, such as a friend or expert recommending a book to you that has helped them in a subject or that is merely interesting.

### Revised (below)

### Task Vignettes (User activity "flow")
- Task 1: Search for "biology" textbooks
- Task 2: Filter by subject and title
- Task 3: Open eBook link
  
  - User configurable fields:
    - subject: 'biology'
    - title: 'biology'
    - author: default to all

The user opens the application in the browser and begins on the homepage. The homepage, by default, shows the title, a search bar, a drop-down menu for subject, and buttons to search by title or author. The user will use the search bar at the top of the page to type and selct the subject "biology", and type 'biology' into the title bar. The user will hit the 'by Title' button, which connects to the API and produces a list of recommended eBooks or eTextbooks to the user related to biology and the title. After finding a book that matches what they are looking for, they will select the link next to the book, which will take them to the digital eReader where they can read through it. 

### Technical "flow"

### Revised (below)

Directory Structure:

- textbook_search_app_AH.py
- templates/
    - google_ebook_reader_template.html
    - results.html
    - search_w_autocomplete.html
    - search.html (unused)
- static/css
    - styles.css (unused)
- categories
    - subject_categories_free_ebooks.csv
    - test_categories.py
- docs
    - project_spec.txt

### Revised (below)

Data Structures:

- Google Books API
- dicts used to store and pass structured data about books and template contexts
- lists used for collections of books and subject categories
- strings used for forming queries, displaying text, and in template rendering
- HTML templates structured HTML data with embedded Jinja2 syntax for dynamic content generation
- Jinja2 template context: dictionaries that provide dynamic data to templates for rendering

### Revised (below)

Core functions: def index(), def perform_search(), def open_ebook()

- def index():
  - renders the search page
  - using 'search_w_autocomplete.html'
  - includes a search form with autocomplete functionality

- def perform_search():
  - retrieves the search term, search type, and subject from the form
  - constructs a query string for the Google Books API. Search term is enclosed in double quotes to handle spaces
  - calls 'get_books(query)' to fetch matching books
  - renders the 'results.html' template with a list of books
    
- def open_ebook():
  - uses Jinja2 to render an HTML template ('google_ebook_reader_template.html') with the eBook's ISBN
  - writes the rendered HTML to a temporary file
  - opens the temporary file in the web browser
  - usees JavaScript to navigate back to the previous page (search results)

### Revised (below)

Program flow:

- set up the Flask application and define routes
- render the search page with an autocomplete feature
- process the search form submission and retrieve books using the 'get_books' function
- HTML and Jinja2 to display book details
- render the search page with links to open eBooks
- render the Google Books viewer for the selected eBook
- provide suggestions for subjects as the user types in the search form

### Final (self) assessment (original project spec)

- Figuring out the core prototype first based on my sketch and then thinking about enhancements (i.e., uploading syllabi) and how to add that as an additional feature
- I feel somewhat confident in implementing the spec as is but I would need help with figuring out what tools to use (Flask, APIs, Bootstrap, Folium, etc.).
- If it's possible to use Amazon API or Open Search Library API for the intended goal, figuring out how to include the filter data (such as all subjects and authors), and whether
it's possible to display this on a GUI. I also don't know if the application can bring up where to rent or check out the book instead of just purchasing on Amazon.
- The parts I am least familiar with are the tools to use (Flask, Bootstrap, Folum, etc.) and how they specifically work. I have worked with Flask in HCI 574, but that was my first introduction.

### Revised (below)

Proposed Additional Feature(s):

- Syllabus upload (from original project spec)

  - add a file upload form: modify 'search_w_autcomplete.html' template to include file upload form for the syllabus
  - handle file uploads: create a new route in the Flask application to handle the file upload
  - use the ChatGPT API to process the uploaded syllabus
  - render the processed syllabus in a new HTML template

- Links for where to purchase the [text]book
- Photos of the [text]books on the GUI
- Search for course at specific university (i.e, Iowa State) ??

